{"name":"Parrot SDK","tagline":"Prise en main et possibilités d'utilisation","body":"ARDroneSDK3 est à ce jour la dernière version officielle du Parrot SDK, publiée le 28 novembre 2014. Pour faire simple, ce SDK permet de controller la plupart des drones et/ou minidrones de Parrot (Rolling Spider, Bebop Drone, Skycontroller, Jumping sumo).Il faut entendre par \"contrôler\" le fait d'effectuer les actions suivantes : \r\n+ Se connecter à un drone\r\n+ Piloter un drone\r\n+ Revoir du stream depuis un drone\r\n+ Sauvegarder et télécharger des photos ou des vidéos réalisées par un drone\r\n+ Transmettre et faire jouer des séquences automatiques de vol \r\n(autopilot flight plan)\r\n+ Mettre et mettre à jour le drone.\r\n\r\n**Un exemple d'utilisation du Parrot SDK**: l'application FreeFlight3 qu'il est recommandé d'installer sous Android ou iOs lors de l'achat d'un drone ou minidrone, fonctionne avec le ARDroneSDK3.\r\n\r\n>Est t-il possible de créer sa propre application de contrôle de drones avec ce SDK ?\"\r\n\r\nOui, tout à fait, c'est tout l'intérêt de la mise à disposition des sources du SDK. Si vous avez des compétences en developpement mobile (Android ou iOs), il vous suffira de créer un projet de dev mobile à votre habitude, ensuite mettre en place les dépendances nécessaires pour avoir la main sur les bibliothèques du SDK et enfin les utliser à votre escient dans le code de votre application mobile.\r\nIl est aussi possible d'implémenter une application de type client lourd en C permettant de controller le drone depuis un pc (Ici sous Ubuntu).\r\n\r\nEn effet, les sources du SDK sont hébergés sur un répertoire Github sous licence BSD. Ce répertoire contient principalement : \r\n+ Les sources des différentes bibliothèques qui constient le SDK\r\n+ Des utilitaires de Build\r\n+ Un manifest\r\n+ Quelques examples d'utilisation du SDK pour chaque plateforme (Unix, Android, iOs)\r\n\r\nOn peut retrouver l'organisation complète du SDK [ici](http://developer.parrot.com/docs/bebop/?c#organisation)\r\n\r\n## Comment utiliser le SDK ?\r\n\r\nLe SDK est principalement écrit en C, et fourni donc des bibliothèques pour les Systèmes Unix, Android et iOs respectivement utilisables en C, Java et Objective C. \r\nNB : les manipulations pour ce billet ont été effectuées pour les plateformes Unix et Android.\r\n\r\n### Outils pré-requis\r\nIl faut commencer par installer au préalable les outils suivants:\r\n+ [Curl](#curl)\r\n+ [Repo](#repo)\r\n+ [git](#git)\r\n+ [automake](#automake)\r\n+ [libtool](#libtool)\r\n+ [yasm](#yasm)\r\n+ [nasm](#nasm)\r\n\r\n\r\n#### Installer Curl\r\n<a name=\"curl\"></a>\r\nFaire `$ sudo apt-get install curl`\r\n\r\n#### Installer Repo tool\r\n<a name=\"repo\"></a>\r\nDans un terminal vous faites :\r\n```\r\n$ mkdir ~/bin\r\n$ PATH=~/bin:$PATH\r\n$ curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo\r\n$ chmod a+x ~/bin/repo\r\n```\r\n\r\n#### Installer git\r\n<a name=\"git\"></a>\r\nFaire `$ sudo apt-get insall git-core`\r\nEnsuite effectuer la config minimale\r\n\r\n```\r\n$ git config --global user.name \"Your Name\"\r\n$ git config --global user.email \"jhon@doe.com\"\r\n```\r\n\r\n#### Installer automake\r\n<a name=\"automake\"></a>\r\nAutomake etant inclu dans autoconf, on fait dans un terminal :\r\n\r\n`$ sudo apt-get install autoconf`\r\n\r\n#### Installer libtool\r\n<a name=\"libtool\"></a>\r\n`$ sudo apt-get install libtool`\r\n\r\n#### Installer yasm\r\n<a name=\"yasm\"></a>\r\n`$ sudo apt-get install yasm`\r\n\r\n#### Installer nasm\r\n<a name=\"nasm\"></a>\r\n`$ sudo apt-get install nasm`\r\n\r\n### Etape 1: Récupération des sources avec Repo\r\n1.Créer un dossier vide dans lequel on va mettre en place notre SDK\r\n```\r\n$ mkdir ~/ARDroneSDK\r\n$ cd ~/ARDroneSDK\r\n```\r\n2.Lancer la commande `repo init`\r\n\r\n`$ repo init -u https://github.com/Parrot-Developers/arsdk_manifests.git`\r\n\r\n3.Descendre tout l'arbre des sources distantes du SDK\r\n`$ repo sync`\r\n\r\n### Etape 2: Le Build\r\n#### Pour une plateforme Unix\r\nLa manip pour faire un build sous Unix est la suivante :\r\n\r\n```\r\n$ cd ~/ARDlaroneSDK\r\n$ ./build.sh -p Unix-forall -t build-sdk-j\r\n```\r\nLe resultat du build sera dans le répertoire `~/ARDroneSDK/out/Unix-base/usr`\r\nOn peut à présent faire fonctionner les examples fournis avec le SDK qu'on peut trouver dans le répertoire `~/ARDroneSDK/packages/Samples/Unix`.\r\n\r\nA ce jour, les instructions fournis sur le site [http://developer.parrot.com/docs/bebop/?c#general-build](http://developer.parrot.com/docs/bebop/?c#general-build)pour faire fonctionner les examples du SDK, sont sans issue, du moins pour Unix.\r\nLes \"Makefile\" des examples sous Unix n'étant pas à jour par rapport à l'architecture du SDK, il faudra y effectuer quelques modifications, ensuite quelques builds atomiques de bibliothèques manquantes, et éditions de liens.\r\nFocalisons nous à présent sur l'exemple \"Jumping Sumo Piloting\".\r\n\r\n\r\nAvec votre éditeur de texte favoris, ouvrez le Makefile situé à cet emplacement\r\n`~/ARDroneSDK/package/Samples/Unix/JumpingSumoPiloting`, puis faites les modifications sur les lignes suivantes:\r\n```\r\nSDK_DIR=~/ARDroneSDK\r\n\r\nCFLAGS=-I$(IDIR) -I $(SDK_DIR)/out/Unix-base/staging/usr/include\r\n\r\nLIBS=-L$(SDK_DIR)/out/Unix-base/staging/usr/lib -larsal -larcommands -larnetwork\r\n -larnetworkal -lardiscovery $(EXTERNAL_LIB)\r\n\r\nLIBS_DBG=-L$(SDK_DIR)/out/Unix-base/staging/usr/lib -larsal_dbg -larcommands_dbg\r\n -larnetwork_dbg -larnetworkal_dbg -lardiscovery_dbg $(EXTERNAL_LIB)\r\n```\r\n\r\nVous remarquerez dans les lignes précédentes du Makefile que, JumpingSumoPiloting aura besoin des bibliothèques `libarsal`,`libarcommands`,\r\n`libarnetwork`,`libarnetworkal` et `libardiscovery` pour fonctionner.\r\n\r\nPetite coquille : `libardiscovery` est manquante dans le répertoire \r\n`~/ARDroneSDK/out/Unix-base/staging/usr/lib` qui contient l'ensemble des bibliothèques qui ont été construites pour la plateforme Unix lors du Build complet du SDK.\r\n\r\n![libardiscovery](img/libardiscovery_miss.png)\r\n\r\nSolution : Faire un build élémentaire pour cette bibliothèque:\r\n\r\nPlacez vous dans le répertoire `~/ARDroneSDK/package/libARDiscovery` qui contient les sources de notre bibliothèque manquante puis vous faites :\r\n\r\n```\r\n$ cd Build\r\n$ ./bootstrap\r\n$ ./configure --prefix=~/ARDroneSDK/out/Unix-base/staging/usr/ \r\n--with-libARSALInclude=~/ARDroneSDK/out/Unix-base/staging/usr/include\r\n$ make\r\n$ make install\r\n```\r\nOn peut voir sur la ligne 3 qu'on va bien installer notre bibliothèque dans \r\n`~/ARDroneSDK/out/Unix-base/staging/usr/` et que notre bibliothèque dépend des includes (headers) de `libARSAL` situés à cet emplacement \r\n`~/ARDroneSDK/out/Unix-base/staging/usr/include`\r\n\r\nLe résultat escompté est le suivant :\r\n\r\n![libardiscovery](img/libardiscovery_lib_include.png)\r\n\r\n`libardiscovery` est bien installé dans le répertoire \r\n`~/ARDroneSDK/out/Unix-base/staging/usr/lib` et les headers correspondants (qui pourront être utilisés par d'autres bibliothèques) le sont aussi dans le répertoire `~/ARDroneSDK/out/Unix-base/staging/usr/include`\r\n\r\nRemarque : Le répertoire `~/ARDroneSDK/package/` en plus de contenir des examples de fonctionnement du SDK, comprend également les sources de toutes les bibliothèques du SDK. S'il vous manque, une lib pour un example donné il vous suffira de refaire la manipulation précédente pour la bibliothèque concernée.\r\n\r\n#### Pour une plateforme Android\r\n\r\n\r\n### Etape 3: Utilisation du SDK\r\n#### Example d'utilisation sous Unix\r\nMaintenant que notre SDK est installé correctement, on peut à présent l'utiliser. Nous nous contenterons pour le moment de faire fonctionner l'un des exemples d'utilisation livré avec le SDK en l'occurence \r\n`JumpingSumoPiloting`.\r\nOn peut remarquer que dans le Makefile que notre exemple dépend d'une bibliothèque externe : [`libncurses` ](http://arnaud-feltz.developpez.com/tutoriels/ncurses/)\r\n\r\n![lncurses](img/lncurses.png)\r\n\r\nOn installe libncurses si on l'a pas:\r\n```\r\n$ sudo apt-get update\r\n$ sudo apt-get install ncurses-dev\r\n```\r\n\r\nOn compile les sources de `JumpingSumoPiloting` et on lance notre executable :\r\n\r\n```\r\n$ cd ~/ARDroneSDK/package/Samples/Unix/JumpingSumoPiloting\r\n$ make\r\n$ ./JumpingSumoPiloting\r\n```\r\n\r\n>Que fait JumpingSumoPiloting ?\r\n\r\nJumpingSumoPiloting est un exemple basique d'utilisation du SDK qui permet de réaliser les actions suivantes:\r\n\r\n+ rechercher un minidrone aux alentours (notre Jumping Sumo)\r\n+ se connecter au minidrone (ici en wifi)\r\n+ envoyer et recevoir des commandes pour piloter le minidrone (Le pilotage du drone se fait avec les touches du clavier : touches directionnelles et Espace)\r\n+ afficher l'état de la batterie du minidrone dans une ihm\r\n\r\nLe tableau qui suit fait un recapitulatif des services fournis par les différentes bibliothèques du SDK, utlisées par JumpingSumoPiloting\r\n\r\n| bibliothèques     | Services          |\r\n| ---------------| ------------------- \r\n| libARSAL       | Une couche d'abstraction du système |  \r\n| libARCommands  | Les commandes qu'on peut envoyer et recevoir au/du drone| \r\n| libARNetwork   | L'envoi et la reception des paquets au/depuis le drone  | \r\n| libARNetworkal | Un couche d'abstraction pour les différents types de réseau sans-fil (Bluetooth Low Energy ou Wifi)|\r\n| libARDiscovery | La découverte dans le réseau des drones supportés|\r\n\r\n[Pour en savoir plus sur les autres bibliothèques ](http://developer.parrot.com/docs/bebop/#organisation)\r\n\r\n#### Exemple d'utilisation sous Android\r\n#### Commandes et évènements","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}